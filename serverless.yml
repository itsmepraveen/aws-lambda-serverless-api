# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless
custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      migrate:  true
      inMemory:  true
      onStart:  true
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  region: ap-southeast-2
  lambdaHashingVersion: 20201221
  environment:
    JOBS_TABLE: ${self:service}-${self:opt, self:provider.stage}-jobs
  iamRoleStatements:
    - Effect: "Allow"
      Action:
       - dynamodb:Query
       - dynamodb:Scan
       - dynamodb:GetItem
       - dynamodb:PutItem
       - dynamodb:UpdateItem
       - dynamodb:DeleteItem
      Resource: "*"

plugins:
  - serverless-offline 
  - serverless-dynamodb-local

functions:
  hello:
    handler: handler.hello
  jobs:
    handler: src/jobs/handler.jobs
  listJobs:
    handler: src/jobs/listJobs.listJobs
    events:
      - http: 
          method: GET 
          path: /jobs
  createJobs:
    handler: src/jobs/createJobs.createJobs
    events:
      - http: 
          method: POST 
          path: /jobs
  findJobs:
    handler: src/jobs/findOne.findOne
    events:
      - http: 
          method: GET 
          path: /jobs/{id}
          request: 
            parameters:
              id: true
  DeleteJob:
    handler: src/jobs/deleteOne.deleteOne
    events:
      - http: 
          method: DELETE 
          path: /jobs/{id}
          request: 
            parameters:
              id: true
  UpdateJob:
    handler: src/jobs/updateJob.updateJob
    events:
      - http: 
          method: PUT 
          path: /jobs/{id}
          request: 
            parameters:
              id: true
resources:
  Resources:
    JobsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.JOBS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
